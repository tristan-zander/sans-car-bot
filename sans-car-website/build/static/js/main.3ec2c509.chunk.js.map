{"version":3,"sources":["components/navbar/Navbar.js","components/layouts/DefaultNavbar.js","components/layouts/Footer.js","components/pages/Home.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","children","DropdownNavItem","useState","open","setOpen","href","onClick","icon","NavItem","path","location","title","DropdownMenu","DropdownItem","DefaultNavbar","Footer","Home","src","alt","type","window","About","App","exact","to","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oUAIO,SAASA,EAAOC,GACnB,OACI,yBAAKC,UAAU,UACX,wBAAIA,UAAU,cACTD,EAAME,WAMhB,SAASC,EAAgBH,GAAQ,IAAD,EAEXI,oBAAS,GAFE,mBAE5BC,EAF4B,KAEtBC,EAFsB,KAInC,OACI,wBAAIL,UAAU,qBACV,uBAAGM,KAAK,IAAIN,UAAU,cAAcO,QAAS,kBAAMF,GAASD,KACvDL,EAAMS,MAGVJ,GAAQL,EAAME,UAKpB,SAASQ,EAAQV,GAAQ,IAAD,EAEHI,oBAAS,GAFN,mBAEpBC,EAFoB,KAEdC,EAFc,KAIrBK,EAAOX,EAAMY,UAAY,IAE/B,OACI,wBAAIX,UAAU,YACV,uBAAGM,KAAMI,EAAMV,UAAWD,EAAMS,KAAO,cAAgB,cAAeD,QAAS,kBAAMF,GAASD,KACzFL,EAAMS,MAAQT,EAAMa,OAGxBR,GAAQL,EAAME,UAKpB,SAASY,EAAad,GAEzB,SAASe,EAAaf,GAClB,IAAMW,EAAOX,EAAMY,SAEnB,OACI,uBAAGL,KAAMI,EAAMV,UAAU,aACpBD,EAAME,UAMnB,OACI,yBAAKD,UAAU,YACX,kBAACc,EAAD,CAAcH,SAAS,KAAvB,QACA,kBAACG,EAAD,CAAcH,SAAS,UAAvB,SACA,kBAACG,EAAD,CAAcH,SAAS,YAAvB,iBC3DG,SAASI,IACpB,OACI,kBAAC,EAAD,KAEI,kBAACb,EAAD,CAAiBM,KAAK,UAClB,kBAACK,EAAD,OAGJ,kBAACJ,EAAD,CAASG,MAAM,OAAOD,SAAS,MAC/B,kBAACF,EAAD,CAASG,MAAM,QAAQD,SAAS,WAChC,kBAACF,EAAD,CAASG,MAAM,eAAeD,SAAS,cCZpC,SAASK,IACpB,OACI,yBAAKhB,UAAU,UAAf,gBAEI,4BACI,+DACA,0D,MCAD,SAASiB,IACpB,OACI,yBAAKjB,UAAU,kBACX,kBAACe,EAAD,MACA,yBAAKf,UAAU,QACX,wBAAIA,UAAU,eAAd,4BACA,yBAAKA,UAAU,gBACX,yBAAKkB,IAAI,4FAA4FC,IAAI,aACzG,4BAAQC,KAAK,SAASb,QAAS,WAE3Bc,OAAOV,SAASL,KAAO,aAF3B,iCAOR,yBAAKN,UAAU,YAEX,wCAEA,yBAAKA,UAAU,aACX,yBAAKA,UAAU,qBACX,4CACA,2FAEJ,yBAAKA,UAAU,qBACX,6CACA,8KAQZ,yBAAKA,UAAU,iBAEX,iDAEA,yBAAKA,UAAU,aACX,yBAAKA,UAAU,qBACX,+CACA,mEAIZ,kBAACgB,EAAD,O,MC/CG,SAASM,IACpB,OACI,yBAAKtB,UAAU,kBACX,kBAACe,EAAD,MACI,yBAAKf,UAAU,yBACX,6CACA,kKAIR,kBAACgB,EAAD,OCoBGO,MA7Bf,WAIE,OACE,kBAAC,IAAD,KACE,yBAAKvB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwB,OAAK,EAACd,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAAC,IAAD,CAAUe,GAAG,OAEf,kBAAC,IAAD,CAAOf,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WAAWgB,UAAW,WAEhC,OADAL,OAAOV,SAASL,KAAO,iFAChB,YCdCqB,QACW,cAA7BN,OAAOV,SAASiB,UAEe,UAA7BP,OAAOV,SAASiB,UAEhBP,OAAOV,SAASiB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3ec2c509.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nimport './Navbar.css';\n\nexport function Navbar(props) {\n    return (\n        <nav className=\"navbar\">\n            <ul className=\"navbar-nav\">\n                {props.children}\n            </ul>\n        </nav>\n    )\n}\n\nexport function DropdownNavItem(props) {\n\n    const [open, setOpen] = useState(false);\n\n    return (\n        <li className=\"dropdown-nav-item\">\n            <a href=\"#\" className=\"icon-button\" onClick={() => setOpen(!open)}>\n                {props.icon}\n            </a>\n\n            {open && props.children}\n        </li>\n    );\n}\n\nexport function NavItem(props) {\n\n    const [open, setOpen] = useState(false);\n\n    const path = props.location || \"#\";\n\n    return (\n        <li className=\"nav-item\">\n            <a href={path} className={props.icon ? \"icon-button\" : \"text-button\"} onClick={() => setOpen(!open)}>\n                {props.icon || props.title}\n            </a>\n\n            {open && props.children}\n        </li>\n    );\n}\n\nexport function DropdownMenu(props) {\n\n    function DropdownItem(props) {\n        const path = props.location;\n\n        return (\n            <a href={path} className=\"menu-item\">\n                {props.children}\n            </a>\n        );\n    }\n    \n\n    return (\n        <div className=\"dropdown\">\n            <DropdownItem location=\"/\">Home</DropdownItem>\n            <DropdownItem location=\"/about\">About</DropdownItem>\n            <DropdownItem location=\"/add-bot\">Add Sans Car</DropdownItem>\n        </div>\n    );\n}\n\n\n\nexport default { Navbar, DropdownNavItem, NavItem, DropdownMenu }","import React from 'react'\n\nimport { Navbar, DropdownNavItem, NavItem, DropdownMenu } from '../navbar/Navbar';\n\nexport default function DefaultNavbar() {\n    return (\n        <Navbar >\n            {/* Change this to a special dropdown icon so it can be hidden unless there's a mobile query */}\n            <DropdownNavItem icon=\"â˜°\">\n                <DropdownMenu></DropdownMenu>\n            </DropdownNavItem>\n\n            <NavItem title=\"Home\" location=\"/\" />\n            <NavItem title=\"About\" location=\"/about\" />\n            <NavItem title=\"Add Sans Car\" location=\"/add-bot\" />\n        </Navbar>\n    )\n}\n","import React from 'react'\n\nexport default function Footer() {\n    return (\n        <div className=\"footer\">\n            Contact info:\n            <ul>\n                <li>Email: tristannzander@gmail.com</li>\n                <li>Discord: Galestrike#8814</li>\n            </ul>\n        </div>\n    )\n}\n","import React from 'react'\n\nimport DefaultNavbar from '../layouts/DefaultNavbar';\nimport Footer from '../layouts/Footer';\n\nimport './Home.css';\n\n// Grid container does the main page\nexport default function Home() {\n    return (\n        <div className=\"grid-container\">\n            <DefaultNavbar />\n            <div className=\"body\">\n                <h1 className=\"main-header\">Sans Car Bot for Discord</h1>\n                <div className=\"discord-mock\">\n                    <img src=\"https://cdn.glitch.com/dbb9f570-9735-4542-ac26-1069d41fa06a%2Fsanscar.jpg?v=1584324797279\" alt=\"Sans car\"></img>\n                    <button type=\"button\" onClick={() => {\n                        // Move to /add-bot\n                        window.location.href = \"/add-bot\";\n                    }}>Add Sans Car to your server</button>\n                </div>\n            </div>\n\n            <div className=\"features\">\n                {/*Put features here. Use apis and don't hard code*/}\n                <h1>Features</h1>\n\n                <div className=\"grid-item\">\n                    <div className=\"grid-item-wrapper\">\n                        <h2>Help Command</h2>\n                        <p>Use \"sans help\" in a discord server for a list of commands.</p>\n                    </div>\n                    <div className=\"grid-item-wrapper\">\n                        <h2>New Additions</h2>\n                        <p>This bot is a project to help me learn programming concepts. Contact me if\n                            there are any new features that you would like to see in the bot. \n                        </p>\n                    </div>\n                </div>\n\n            </div>\n\n            <div className=\"documentation\">\n                {/* Put documentation and apis here. Use apis and don't hard code */}\n                <h1>Api Documentation</h1>\n\n                <div className=\"grid-item\">\n                    <div className=\"grid-item-wrapper\">\n                        <h2>GET \"/api/ping\"</h2>\n                        <p>Pings the server to keep it alive</p>\n                    </div>\n                </div>\n            </div>\n            <Footer />\n        </div>\n    )\n}\n","import React from 'react'\nimport DefaultNavbar from '../layouts/DefaultNavbar'\nimport Footer from '../layouts/Footer'\n\nimport './About.css'\n\nexport default function About() {\n    return (\n        <div className=\"grid-container\">\n            <DefaultNavbar />\n                <div className=\"about about-container\">\n                    <h1>About the bot</h1>\n                    <p>Mainly just a passion project to make a cool bot. I'll update this when I get a better idea about what I want to \n                        do with this bot.\n                    </p>\n                </div>\n            <Footer />\n        </div>\n    )\n}\n","import React from 'react';\n\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\n\nimport Home from './components/pages/Home';\nimport About from './components/pages/About';\n\nfunction App() {\n\n  // Use client side routing to change page\n\n  return (\n    <Router>\n      <div className=\"App\" >\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/home\">\n            <Redirect to=\"/\" />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/add-bot\" component={() => {\n            window.location.href = \"https://discordapp.com/oauth2/authorize?client_id=688911764703674431&scope=bot\";\n            return null;\n          }}>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}